version: '3.4'
x-common-variables: &common-variables
  APP_ENV: production
services:

  broker-service:
    container_name: broker-service
    build:
      context: ../broker-service
      dockerfile: broker-service.dockerfile # Relative to the context location
    restart: always
    ports:
      - "8080:80" # Map 8080 on our machine to 8080 on the container
    deploy:
      mode: replicated
      replicas: 1
    environment: *common-variables

  logger-service:
    container_name: logger-service
    build:
      context: ../logger-service
      dockerfile: logger-service.dockerfile # Relative to the context location
    restart: always
    ports:
      - "8081:80" # Map 8081 on our machine to 8081 on the container
    deploy:
      mode: replicated
      replicas: 1
    environment: *common-variables

  authentication-service:
    container_name: authentication-service
    build:
      context: ../authentication-service
      dockerfile: authentication-service.dockerfile
    restart: always
    environment:
      <<: *common-variables
      DSN: 'host=postgres port=5432 user=postgres password=postgres dbname=users sslmode=disable timezone=UTC connect_timeout=5'

  mail-service:
    container_name: mail-service
    build:
      context: ../mail-service
      dockerfile: mail-service.dockerfile
    restart: always
    environment: 
      <<: *common-variables
      MAIL_PORT: 1025
      MAIL_DOMAIN: localhost
      MAIL_HOST: mailhog
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      MAIL_ENCRYPTION: none
      MAIL_FROM_NAME: "John Doe"
      MAIL_FROM_ADDRESS: john.dog@example.com
    deploy:
      mode: replicated
      replicas: 1


  postgres:
    container_name: postgres
    image: 'postgres:14.2'
    ports:
      - "5432:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      <<: *common-variables
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    volumes:
      - ../db/postgres/:/var/lib/postgresql/data/ # Data Volume
      - ../db/scripts/setup.sql:/docker-entrypoint-initdb.d/01-setup.sql # Start up Script

  mongo:
    container_name: mongo
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      <<: *common-variables
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ../db/mongo/:/data/db

  mailhog:
    environment: *common-variables
    image: 'mailhog/mailhog:latest'
    ports:
      - "1025:1025"
      - "8025:8025"
